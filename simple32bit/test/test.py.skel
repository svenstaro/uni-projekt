from unittest import TestCase
from myhdl import *

class DutClass():
    """Wrapper around DUT"""
    def __init__(self):
        pass

    def Gens(self, traceSignal = False):
        pass

def genSim(verifyMethod, cl=DutClass, clkfreq=1, traceSignal=False):
    """ Generates a Simulation Object """

    dut_cl = cl()

    @always(delay(clkfreq))
    def clkGen():
        dut_cl.clk.next = not dut_cl.clk

    @instance
    def stimulus():
        dut_cl.reset.next = True
        yield delay(3)
        dut_cl.reset.next = False

        yield verifyMethod(dut_cl, dut)
        raise StopSimulation

    dut = dut_cl.Gens(trace=trace)
    return Simulation(dut, clkGen, stimulus)


class DummyTest(TestCase):
    def testDummy(self):
        def verify(cl, dut):
            pass

        genSim(verify).run()

# vim: set ft=python:
