// abstractbytearrayview.sip generated by MetaSIP on Mon Oct  8 00:06:00 2012
//
// This file is part of the okteta Python extension module.
//
// Copyright (C) 2012 Shaheed Haque <srhaque@theiet.org>
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) version 3.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public License
// along with this library; see the file COPYING.LIB.  If not, write to
// the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.


namespace Okteta
{
%TypeHeaderCode
#include <abstractbytearrayview.h>
%End

    class AbstractByteArrayView : Okteta::ColumnsView /Abstract/
    {
%TypeHeaderCode
#include <abstractbytearrayview.h>
%End

    public:
        enum ValueCoding
        {
            HexadecimalCoding,
            DecimalCoding,
            OctalCoding,
            BinaryCoding,
            MaxCodingId,
        };

        enum CharCoding
        {
            LocalEncoding,
            ISO8859_1Encoding,
            EBCDIC1047Encoding,
            StartOfOwnEncoding,
            MaxEncodingId,
        };

        enum LayoutStyle
        {
            FixedLayoutStyle,
            WrapOnlyByteGroupsLayoutStyle,
            FullSizeLayoutStyle,
            LastUserLayout,
        };

        enum CodingTypeId
        {
            NoCodingId,
            ValueCodingId,
            CharCodingId,
        };

        enum CodingTypes
        {
            OnlyValueCoding,
            OnlyCharCoding,
            ValueAndCharCodings,
        };

        virtual ~AbstractByteArrayView();
        Okteta::AbstractByteArrayModel *byteArrayModel() const;
        bool isModified() const;
        bool isOverwriteMode() const;
        bool isOverwriteOnly() const;
        bool isReadOnly() const;
        Okteta::Address cursorPosition() const;
        bool isCursorBehind() const;
        Okteta::Address startOffset() const;
        Okteta::Address firstLineOffset() const;
        int noOfBytesPerLine() const;
        Okteta::AbstractByteArrayView::LayoutStyle layoutStyle() const;
        bool tabChangesFocus() const;
        Okteta::AbstractByteArrayView::CodingTypes visibleCodings() const;
        Okteta::AbstractByteArrayView::CodingTypeId activeCoding() const;
        bool offsetColumnVisible() const;
        bool hasSelectedData() const;
        Okteta::AbstractByteArrayView::ValueCoding valueCoding() const;
        Okteta::AbstractByteArrayView::CharCoding charCoding() const;
        const QString &charCodingName() const;
        double zoomLevel() const;
        virtual int byteSpacingWidth() const = 0;
        virtual int noOfGroupedBytes() const = 0;
        virtual int groupSpacingWidth() const = 0;
        virtual int binaryGapWidth() const = 0;
        virtual bool showsNonprinting() const = 0;
        virtual QChar substituteChar() const = 0;
        virtual QChar undefinedChar() const = 0;
        virtual bool isByteTypeColored() const = 0;
        virtual void setByteArrayModel(Okteta::AbstractByteArrayModel *byteArrayModel);
        virtual void setByteSpacingWidth(int byteSpacingWidth) = 0;
        virtual void setNoOfGroupedBytes(int noOfGroupedBytes) = 0;
        virtual void setGroupSpacingWidth(int groupSpacingWidth) = 0;
        virtual void setBinaryGapWidth(int binaryGapWidth) = 0;
        virtual void setBufferSpacing(int byteSpacingWidth, int noOfGroupedBytes = 0, int groupSpacingWidth = 0) = 0;
        virtual void setValueCoding(Okteta::AbstractByteArrayView::ValueCoding valueCoding) = 0;
        virtual void setShowsNonprinting(bool showsNonprinting = true) = 0;
        virtual void setSubstituteChar(QChar substituteChar) = 0;
        virtual void setUndefinedChar(QChar undefinedChar) = 0;
        virtual void setCharCoding(Okteta::AbstractByteArrayView::CharCoding charCoding) = 0;
        virtual void setCharCoding(const QString &charCodingName) = 0;
        virtual void setByteTypeColored(bool isColored) = 0;
        void setModified(bool modified);
        void setLayoutStyle(Okteta::AbstractByteArrayView::LayoutStyle layoutStyle);
        void setReadOnly(bool readOnly);
        void setOverwriteOnly(bool overwriteOnly);
        void setOverwriteMode(bool overwriteMode);
        void setNoOfBytesPerLine(int noOfBytesPerLine);
        void setStartOffset(Okteta::Address startOffset);
        void setFirstLineOffset(Okteta::Address firstLineOffset);
        void setTabChangesFocus(bool tabChangesFocus = true);
        void setActiveCoding(Okteta::AbstractByteArrayView::CodingTypeId codingId);
        void setVisibleCodings(int visibleCodings);
        void toggleOffsetColumn(bool offsetColumnVisible);
        QByteArray selectedData() const;
        QMimeData *selectionAsMimeData() const;
        void pasteData(const QMimeData *data);
        void removeSelectedData();
        void insert(const QByteArray &data);
        void setCursorPosition(Okteta::Address index, bool isBehind = false);
        void setSelectionCursorPosition(Okteta::Address index);
        void selectAll(bool select);
        void setSelection(Okteta::Address start, Okteta::Address end);
        bool selectWord(Okteta::Address index);
        void setMarking(Okteta::Address start, Okteta::Address end);
        void ensureCursorVisible();
        void placeCursor(const QPoint &point);
        bool canReadData(const QMimeData *data) const;
        void zoomIn(int pointInc);
        void zoomIn();
        void zoomOut(int pointDec);
        void zoomOut();
        void zoomTo(int pointSize);
        void unZoom();
        void setZoomLevel(double level);
        void startCursor();
        void stopCursor();
        void pauseCursor();
        void unpauseCursor();
        virtual void copy();
        virtual void cut();
        virtual void paste();
        QRect cursorRect() const;
        virtual QSize sizeHint() const;
        Okteta::Address indexByPoint(const QPoint &point) const;

    protected:
        void clicked(Okteta::Address index);
        void doubleClicked(Okteta::Address index);
        void cursorPositionChanged(Okteta::Address index);
        void overwriteModeChanged(bool newOverwriteMode);
        void readOnlyChanged(bool isReadOnly);
        void hasSelectedDataChanged(bool hasSelectedData);
        void cutAvailable(bool Really);
        void copyAvailable(bool Really);
        void charCodecChanged(const QString &codecName);
        void valueCodingChanged(int valueCoding);
        void focusChanged(bool hasFocus);
        void offsetColumnVisibleChanged(bool visible);
        void visibleByteArrayCodingsChanged(int columns);
        void layoutStyleChanged(int layoutStyle);
        void noOfBytesPerLineChanged(int noOfBytesPerLine);
        void showsNonprintingChanged(bool showsNonprinting);
        void substituteCharChanged(QChar substituteChar);
        void undefinedCharChanged(QChar undefinedChar);
        void noOfGroupedBytesChanged(int noOfGroupedBytes);
        void finishByteEdit();
        void emitSelectionSignals();
        void updateChanged();
        void copyToClipboard(QClipboard::Mode mode) const;
        void pasteFromClipboard(QClipboard::Mode mode);
        const Okteta::ValueCodec *valueCodec() const;
        const Okteta::CharCodec *charCodec() const;
        virtual void keyPressEvent(QKeyEvent *keyEvent);
        virtual void mousePressEvent(QMouseEvent *mousePressEvent);
        virtual void mouseReleaseEvent(QMouseEvent *mouseReleaseEvent);
        virtual void mouseMoveEvent(QMouseEvent *mouseMoveEvent);
        virtual void mouseDoubleClickEvent(QMouseEvent *mouseDoubleClickEvent);
        virtual bool event(QEvent *event);
        virtual void showEvent(QShowEvent *showEvent);
        virtual void focusInEvent(QFocusEvent *focusEvent);
        virtual void focusOutEvent(QFocusEvent *focusEvent);
        virtual void resizeEvent(QResizeEvent *resizeEvent);
        virtual void dragEnterEvent(QDragEnterEvent *dragEnterEvent);
        virtual void dragMoveEvent(QDragMoveEvent *dragMoveEvent);
        virtual void dragLeaveEvent(QDragLeaveEvent *dragLeaveEvent);
        virtual void dropEvent(QDropEvent *dropEvent);
        virtual void wheelEvent(QWheelEvent *e);
        virtual bool viewportEvent(QEvent *event);
        virtual void setNoOfLines(int newNoOfLines);
        virtual void changeEvent(QEvent *event);

    public:
        AbstractByteArrayView(void *d, QWidget *parent); // Manually added via MetaSIP;
    };
};
